#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('seokjang-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

// io.on('connection', function(client){
//   console.log('socket connected!')
//   client.on('messageChange', function(data){
//     console.log(data);
//     client.emit('receive', data.message.split('').reverse().join(''))
//   });
//   client.on('disconnect', function(){});
// });

//io.on('connection', function(socket) {
//  socket.on('SEND_MESSAGE', function(data) {
//    io.emit('MESSAGE', data)
//  })
//})
/*

const interval = setInterval(() => {
  io.emit('MESSAGE', emailSendResultCount)
})
clearInterval(interval)
*/

io.on('connection', function(socket) {

  socket.on('SEND_MESSAGE', function(isStop) {

    /*if (!isStop.stop) {
      let interval = setInterval(() => {
        console.log('esrc', emailSendResultCount)
        io.emit('MESSAGE', { esrc : emailSendResultCount, int: interval})
      }, 1000)
    } else {
      console.log('try to stop...')
      console.log('isStop.int', isStop.int)
      clearInterval(isStop.int)
    }*/

   var interval = setInterval(function() {
      if (!isStop) {
        console.log('eSRC', emailSendResultCount)
        io.emit('MESSAGE', emailSendResultCount)
        setTimeout(function(){ clearInterval(interval);}, 10000);
      } else {
        console.log("stopped")
        //clearInterval(interval)
        //setTimeout(function(){ clearInterval(interval);}, 3000);
        // 밖에서 선언한 interval을 안에서 중지시킬 수 있음
      }
    }, 1000)
    //clearInterval(interval)
  })
})


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
